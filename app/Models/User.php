<?php
declare(strict_types=1);

namespace CodeShopping\Models;

use CodeShopping\Models\UserProfile;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Tymon\JWTAuth\Contracts\JWTSubject;


class User extends Authenticatable implements JWTSubject
{
    use Notifiable, SoftDeletes ;

    const ROLE_SELLER = 1;
    CONST ROLE_CUSTOMER = 2;

    protected $dates = ['deleted_at'];

    protected $fillable = [
        'name', 'email', 'password',
    ];

    protected $hidden = [
        'password', 'remember_token',
    ];

    public static function createCustomer(array $data): User
    {
        try{
            UserProfile::uploadPhoto($data['photo']);
            \DB::beginTransaction();
            \DB::commit();
        }catch (\Exception $e){
            //excluir a foto
            \DB::rollBack();
            throw $e;
        }
    }

    public function fill(array $attributes)
    {
        !isset($attributes['password']) ?: $attributes['password'] = bcrypt($attributes['password']);
        return parent::fill($attributes); // TODO: Change the autogenerated stub
    }

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->id;
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [
          'email' => $this->email,
          'name' => $this->name
        ];
    }

    public function profile(){
       return $this->hasOne(UserProfile::class)->withDefault(); //devolve a instancia do perfil mesmo se estiver fazia
    }
}

//deseign Pattern = Null Pattern